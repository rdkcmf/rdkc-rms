cmake_minimum_required(VERSION 2.6.3)
cmake_policy(SET CMP0059 OLD)

IF(DEFINED CMAKE_BUILD_TYPE)
     SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel")
ELSE(DEFINED CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel")
ENDIF(DEFINED CMAKE_BUILD_TYPE)

PROJECT(all)

IF(NOT DEFINED PROJECT_ROOT)
	GET_FILENAME_COMPONENT(PROJECT_ROOT "../.." ABSOLUTE)
ENDIF(NOT DEFINED PROJECT_ROOT)
GET_FILENAME_COMPONENT(BUILDER_ROOT "${PROJECT_ROOT}/builders/cmake" ABSOLUTE)
GET_FILENAME_COMPONENT(SOURCES_ROOT "${PROJECT_ROOT}/sources" ABSOLUTE)
GET_FILENAME_COMPONENT(CONSTANTS_ROOT "${PROJECT_ROOT}/constants" ABSOLUTE)
GET_FILENAME_COMPONENT(3RDPARTY_ROOT "${PROJECT_ROOT}/3rdparty" ABSOLUTE)

MESSAGE(STATUS "PROJECT_ROOT: ${PROJECT_ROOT}")
MESSAGE(STATUS "BUILDER_ROOT: ${BUILDER_ROOT}")
MESSAGE(STATUS "SOURCES_ROOT: ${SOURCES_ROOT}")
MESSAGE(STATUS "CONSTANTS_ROOT: ${CONSTANTS_ROOT}")
MESSAGE(STATUS "3RDPARTY_ROOT: ${3RDPARTY_ROOT}")


SET(RDKCMEDIASERVER_ROOT "lib/rdkcmediaserver")

IF(DEFINED RDKCMEDIASERVER_INSTALL_PREFIX)
	SET(CMAKE_INSTALL_PREFIX ${RDKCMEDIASERVER_INSTALL_PREFIX})
	SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
	SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
	SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${RDKCMEDIASERVER_ROOT}")
	SET(CMAKE_INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/${RDKCMEDIASERVER_ROOT}")
ELSE(DEFINED RDKCMEDIASERVER_INSTALL_PREFIX)
	SET(CMAKE_INSTALL_PREFIX /tmp/rdkcmediaserver)
ENDIF(DEFINED RDKCMEDIASERVER_INSTALL_PREFIX)

#sample commit to trigger HUDSON

#detect additional libraries
SET(OpenSSL_FIND_REQUIRED true)
SET(CRYPTO_FIND_REQUIRED true)
INCLUDE(cmake_find_modules/Find_openssl.cmake)
INCLUDE(cmake_find_modules/Find_dl.cmake)
INCLUDE(cmake_find_modules/pch_support.cmake)
INCLUDE(CMakeDetermineSystem)
INCLUDE(cmake_find_modules/Find_HWInfo.cmake)
INCLUDE(TestBigEndian)


#setup the endianess if not already defined in toolchain file
if(NOT DEFINED NO_ENDIANESS)
	TEST_BIG_ENDIAN(ENDIANESS)
	IF(ENDIANESS)
		ADD_DEFINITIONS(-DBIG_ENDIAN_BYTE_ALIGNED)
	ELSE(ENDIANESS)
		ADD_DEFINITIONS(-DLITTLE_ENDIAN_BYTE_ALIGNED)
	ENDIF(ENDIANESS)
ENDIF(NOT DEFINED NO_ENDIANESS)

#generate version.h
FILE(WRITE ${SOURCES_ROOT}/common/include/version.h "//THIS FILE IS GENERATED\n")
EXECUTE_PROCESS(COMMAND date -u +%s OUTPUT_VARIABLE TEMP_VAL_RAW)
STRING(STRIP "${TEMP_VAL_RAW}" TEMP_VAL)
FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_VERSION_BUILD_DATE ${TEMP_VAL}\n")
EXECUTE_PROCESS(COMMAND git rev-list --count HEAD OUTPUT_VARIABLE RES_VAR OUTPUT_STRIP_TRAILING_WHITESPACE)
FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_VERSION_BUILD_NUMBER \"${RES_VAR}\"\n")
EXECUTE_PROCESS(COMMAND git rev-parse HEAD OUTPUT_VARIABLE TEMP_VAL OUTPUT_STRIP_TRAILING_WHITESPACE)
FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_VERSION_HASH \"${TEMP_VAL}\"\n")
EXECUTE_PROCESS(COMMAND git symbolic-ref --short HEAD OUTPUT_VARIABLE TEMP_VAL OUTPUT_STRIP_TRAILING_WHITESPACE)
FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_BRANCH_NAME \"${TEMP_VAL}\"\n")
FILE(STRINGS "../../RELEASE_NUMBER" RELEASE_NUMBER)
FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_VERSION_RELEASE_NUMBER \"${RELEASE_NUMBER}\"\n")
FILE(STRINGS "../../CODE_NAME" CODE_NAME)
FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_VERSION_CODE_NAME \"${CODE_NAME}\"\n")
FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_VERSION_BUILDER_OS_NAME \"$ENV{OS_NAME}\"\n")
FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_VERSION_BUILDER_OS_VERSION \"$ENV{OS_VERSION}\"\n")
FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_VERSION_BUILDER_OS_ARCH \"$ENV{OS_ARCH}\"\n")
EXECUTE_PROCESS(COMMAND uname -a OUTPUT_VARIABLE TEMP_VAL_RAW)
STRING(STRIP "${TEMP_VAL_RAW}" TEMP_VAL)
FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_VERSION_BUILDER_OS_UNAME \"${TEMP_VAL}\"\n")
IF(DEFINED ENV{BIND_ID})
	FILE(APPEND ${SOURCES_ROOT}/common/include/version.h "#define RMS_BIND_ID $ENV{BIND_ID}\n")
ENDIF(DEFINED ENV{BIND_ID})
#supported features
ADD_DEFINITIONS(-DHAS_PROTOCOL_HTTP)
ADD_DEFINITIONS(-DHAS_PROTOCOL_HTTP2)
ADD_DEFINITIONS(-DHAS_PROTOCOL_RTMP)
ADD_DEFINITIONS(-DHAS_PROTOCOL_LIVEFLV)
ADD_DEFINITIONS(-DHAS_PROTOCOL_RTP)
ADD_DEFINITIONS(-DHAS_PROTOCOL_TS)
ADD_DEFINITIONS(-DHAS_PROTOCOL_VAR)
ADD_DEFINITIONS(-DHAS_PROTOCOL_CLI)
ADD_DEFINITIONS(-DHAS_PROTOCOL_RPC)
ADD_DEFINITIONS(-DHAS_PROTOCOL_HLS)
ADD_DEFINITIONS(-DHAS_PROTOCOL_HDS)
ADD_DEFINITIONS(-DHAS_PROTOCOL_MSS)
ADD_DEFINITIONS(-DHAS_PROTOCOL_DASH)
ADD_DEFINITIONS(-DHAS_PROTOCOL_DRM)
ADD_DEFINITIONS(-DHAS_WEBSERVER)
ADD_DEFINITIONS(-DHAS_PROTOCOL_METADATA)
ADD_DEFINITIONS(-DHAS_PROTOCOL_EXTERNAL)
ADD_DEFINITIONS(-DHAS_PROTOCOL_ASCIICLI)
ADD_DEFINITIONS(-DHAS_MEDIA_MP3)
ADD_DEFINITIONS(-DHAS_MEDIA_MP4)
ADD_DEFINITIONS(-DHAS_MEDIA_FLV)
ADD_DEFINITIONS(-DHAS_MEDIA_TS)
ADD_DEFINITIONS(-DHAS_MEDIA_VOD)
ADD_DEFINITIONS(-DHAS_MEDIA_LST)
ADD_DEFINITIONS(-DHAS_RTSP_LAZYPULL)
ADD_DEFINITIONS(-DHAS_LLWM_AUTH)
#ADD_DEFINITIONS(-DHAS_SYSLOG)
ADD_DEFINITIONS(-DGLOBALLY_ACCOUNT_BYTES)
#ADD_DEFINITIONS(-DHAS_LICENSE)
#ADD_DEFINITIONS(-DHAS_LICENSE_MANAGER)
ADD_DEFINITIONS(-DHAS_EPOLL_TIMERS)
ADD_DEFINITIONS(-DHAS_THREAD)
ADD_DEFINITIONS(-DTHREAD_POSIX)
#ADD_DEFINITIONS(-DHAS_V4L2)
#ADD_DEFINITIONS(-DV4L2_DEBUG)
#ADD_DEFINITIONS(-DHAS_STREAM_DEBUG)
ADD_DEFINITIONS(-DHAS_W3C_FOR_EWS)
ADD_DEFINITIONS(-DHAS_PROTOCOL_WS)
ADD_DEFINITIONS(-DHAS_PROTOCOL_WS_FMP4)
ADD_DEFINITIONS(-DHAS_LUA)
ADD_DEFINITIONS(-DSCTP_USE_SENDSPACE)
ADD_DEFINITIONS(-DHAS_PROTOCOL_WEBRTC)
ADD_DEFINITIONS(-DHAS_H265)
ADD_DEFINITIONS(-DWEBRTC_DEBUG)
#ADD_DEFINITIONS(-DTIMEPROBE_DEBUG)
#ADD_DEFINITIONS(-DHAS_PROTOCOL_API)
ADD_DEFINITIONS(-DHAS_G711)
ADD_DEFINITIONS(-DHAS_PROTOCOL_RAWMEDIA)
ADD_DEFINITIONS(-DWRTC_CAPAB_HAS_HEARTBEAT)
ADD_DEFINITIONS(-DOPENSSL_API_COMPAT=0x10100000L)

IF($ENV{COMPILE_STATIC} MATCHES "1")
	MESSAGE(STATUS "Compile static")
	ADD_DEFINITIONS(-DCOMPILE_STATIC)
	SET(LIB_TYPE STATIC)
	SET(LUA_LIBRARY_PATH "lua")
	SET(LUA_INCLUDE_PATH "${3RDPARTY_ROOT}/lua-dev")
	SET(TINYXML_LIBRARY_PATH "tinyxml")
	SET(TINYXML_INCLUDE_PATH "${3RDPARTY_ROOT}/tinyxml")
	SET(SCTP_LIBRARY_PATH "sctp")
	SET(SCTP_INCLUDE_PATH "${3RDPARTY_ROOT}/usrsctplib")
#	SET(TEMP_EXE_LINK_C_FLAGS "${CMAKE_EXE_LINK_STATIC_C_FLAGS}")
#	SET(TEMP_EXE_LINK_CXX_FLAGS "${CMAKE_EXE_LINK_STATIC_CXX_FLAGS}")
#	SET(CMAKE_EXE_LINK_DYNAMIC_C_FLAGS ${TEMP_EXE_LINK_C_FLAGS})
#	SET(CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS ${TEMP_EXE_LINK_CXX_FLAGS})
#	SET(CMAKE_EXE_LINK_STATIC_C_FLAGS ${TEMP_EXE_LINK_C_FLAGS})
#	SET(CMAKE_EXE_LINK_STATIC_CXX_FLAGS ${TEMP_EXE_LINK_CXX_FLAGS})
ELSE($ENV{COMPILE_STATIC} MATCHES "1")
	MESSAGE(STATUS "Compile dynamic")
	SET(LIB_TYPE SHARED)

	INCLUDE(cmake_find_modules/Find_lua.cmake)
	IF(NOT LUA_FOUND)
		ADD_SUBDIRECTORY(lua lua)
	ENDIF(NOT LUA_FOUND)

	INCLUDE(cmake_find_modules/Find_tinyxml.cmake)
	IF(NOT TINYXML_FOUND)
		ADD_SUBDIRECTORY(tinyxml tinyxml)
	ENDIF(NOT TINYXML_FOUND)
ENDIF($ENV{COMPILE_STATIC} MATCHES "1")

#disable file/line/function inside logging
#ADD_DEFINITIONS(-DFILE_OVERRIDE)
#ADD_DEFINITIONS(-DLINE_OVERRIDE)
#ADD_DEFINITIONS(-DFUNC_OVERRIDE)
#ADD_DEFINITIONS(-DASSERT_OVERRIDE)

ADD_DEFINITIONS(-DHAS_LUA)

#INCLUDE(cmake_find_modules/Find_v8.cmake)
#IF(V8_FOUND)
#    ADD_DEFINITIONS(-DHAS_V8)
#ENDIF(V8_FOUND)

#memory pool
#ADD_DEFINITIONS(-DUSE_MEM_POOL)
#ADD_DEFINITIONS(-DDEBUG_MEM_POOL)

SET(GENERIC_FLAGS "-stdlib=libc++ -Wall -Werror -Wno-overloaded-virtual -Wno-address-of-packed-member -Wno-deprecated-declarations -Wno-tautological-compare -Wno-nullability-completeness")

#add 64 bit support for 32 but platforms
ADD_DEFINITIONS(-D__USE_FILE_OFFSET64)
ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64)
MESSAGE(STATUS "We have a ${CMAKE_SYSTEM} system")
IF(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
	SET(GENERIC_FLAGS "${GENERIC_FLAGS} -fPIC -fdata-sections -ffunction-sections")
	IF(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-D${SOCKREACTOR})
	ELSE(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-DNET_KQUEUE)
		SET(SOCKREACTOR NET_KQUEUE)
	ENDIF(DEFINED SOCKREACTOR)
	STRING(TOLOWER ${CMAKE_SYSTEM} TEMP_CMAKE_SYSTEM)
	STRING(REGEX MATCH "kfreebsd*" TEMP_CMAKE_SYSTEM_MATCH ${TEMP_CMAKE_SYSTEM})
	IF(TEMP_CMAKE_SYSTEM_MATCH MATCHES "kfreebsd")
		ADD_DEFINITIONS(-DDFREEBSD)
	ELSE(TEMP_CMAKE_SYSTEM_MATCH MATCHES "kfreebsd")
		ADD_DEFINITIONS(-DFREEBSD)
		INCLUDE(cmake_find_modules/Find_execinfo.cmake)
	ENDIF(TEMP_CMAKE_SYSTEM_MATCH MATCHES "kfreebsd")
	SET(INTL_LIB "-lintl")
	SET(CMAKE_EXE_LINK_STATIC_C_FLAGS "${CMAKE_EXE_LINK_STATIC_C_FLAGS} -Wl,--gc-sections")
	SET(CMAKE_EXE_LINK_STATIC_CXX_FLAGS "${CMAKE_EXE_LINK_STATIC_CXX_FLAGS} -Wl,--gc-sections")
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Darwin")
	SET(GENERIC_FLAGS "${GENERIC_FLAGS} -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -mmacosx-version-min=10.13")
	ADD_DEFINITIONS(-DOSX)
	IF(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-D${SOCKREACTOR})
	ELSE(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-DNET_KQUEUE)
		SET(SOCKREACTOR NET_KQUEUE)
	ENDIF(DEFINED SOCKREACTOR)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Linux")
	SET(GENERIC_FLAGS "${GENERIC_FLAGS} -fPIC -fdata-sections -ffunction-sections")
	ADD_DEFINITIONS(-DLINUX)
	IF(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-D${SOCKREACTOR})
	ELSE(DEFINED SOCKREACTOR)
		ADD_DEFINITIONS(-DNET_EPOLL)
		SET(SOCKREACTOR NET_EPOLL)
	ENDIF(DEFINED SOCKREACTOR)
	SET(SOCKET_LIB "-lrt")
	SET(CMAKE_EXE_LINK_STATIC_C_FLAGS "${CMAKE_EXE_LINK_STATIC_C_FLAGS} -Wl,--gc-sections")
	SET(CMAKE_EXE_LINK_STATIC_CXX_FLAGS "${CMAKE_EXE_LINK_STATIC_CXX_FLAGS} -Wl,--gc-sections -pthread -Wl,--no-as-needed")
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "SunOS")
	SET(GENERIC_FLAGS "${GENERIC_FLAGS} -fPIC -fdata-sections -ffunction-sections")
	ADD_DEFINITIONS(-DSOLARIS)
	ADD_DEFINITIONS(-DDONT_DEFINE_HTONLL)
	ADD_DEFINITIONS(-DNET_SELECT)
	SET(SOCKREACTOR NET_SELECT)
	SET(SOCKET_LIB "-lsocket -lnsl")
	SET(CMAKE_EXE_LINK_STATIC_C_FLAGS "${CMAKE_EXE_LINK_STATIC_C_FLAGS} -Wl,--gc-sections")
	SET(CMAKE_EXE_LINK_STATIC_CXX_FLAGS "${CMAKE_EXE_LINK_STATIC_CXX_FLAGS} -Wl,--gc-sections")
ELSE(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
	MESSAGE(FATAL_ERROR "Platform ${CMAKE_SYSTEM_NAME} not supported yet")
ENDIF(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")

#debug/release
GET_FILENAME_COMPONENT(ABSOLUTE_ROOT_PATH ${SOURCES_ROOT} ABSOLUTE)
STRING(LENGTH ${ABSOLUTE_ROOT_PATH} ABSOLUTE_ROOT_PATH_LENGTH)
if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
endif()
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GENERIC_FLAGS} -fno-rtti")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GENERIC_FLAGS}")
SET(CMAKE_CXX_FLAGS_DEBUG "-O0 -DWITH_SANITY_INPUT_BUFFER -DVALIDATE_FROMAT_SPECIFIERS -Wformat=2")
SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fvisibility=hidden -fno-strict-aliasing -DSHORT_PATH_IN_LOGGER=${ABSOLUTE_ROOT_PATH_LENGTH}")
#SET(CMAKE_VERBOSE_MAKEFILE TRUE)

#generate defines.h
IF (EXISTS ${SOURCES_ROOT}/common/include/defines.h)
	MESSAGE(STATUS "Defines are in place")
ELSE (EXISTS ${SOURCES_ROOT}/common/include/defines.h)
	MESSAGE(STATUS "We need to rebuild the defines")
	EXECUTE_PROCESS(COMMAND lua constants.lua cpp ${SOURCES_ROOT}/common/include/defines.h WORKING_DIRECTORY ${CONSTANTS_ROOT})
ENDIF(EXISTS ${SOURCES_ROOT}/common/include/defines.h)


IF($ENV{COMPILE_STATIC} MATCHES "1")
    ADD_SUBDIRECTORY(lua lua)
    ADD_SUBDIRECTORY(tinyxml tinyxml)
    ADD_SUBDIRECTORY(sctp sctp)
ENDIF($ENV{COMPILE_STATIC} MATCHES "1")
ADD_SUBDIRECTORY(common common)
ADD_SUBDIRECTORY(thelib thelib)
ADD_SUBDIRECTORY(applications applications)
ADD_SUBDIRECTORY(rdkcmediaserver rdkcmediaserver)
ADD_SUBDIRECTORY(protocolmodules protocolmodules)
ADD_SUBDIRECTORY(tests)
#ADD_SUBDIRECTORY(hlstool)
#ADD_SUBDIRECTORY(mp4writer)
#ADD_SUBDIRECTORY(v4l2dumper)
#ADD_SUBDIRECTORY(trafficdissector)
#ADD_SUBDIRECTORY(webserver)
